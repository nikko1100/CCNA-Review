Ref:https://youtu.be/IdqQfGUup28?si=eoiJOTDyWlU22Yjz
a

Basic Authentication
	-sends credentials (user & pass) in the request headers
	-uses Base64 encoding for credentials security
	-Vulnerable to eavesdropping if not used over HTTPS
	
	Ref: https://youtu.be/rhi1eIjSbvk?si=ZA9elLA-eOlGGYph
		The Basic HTTP Auth Scheme
		Built into the browser
		Encoded NOT Encrypted -BASE64-
	
Digest Authentication
	- Challenges the client with a unique value.
	- Requires the client to hash the credentials, challenge, and other data
	- more secure than basic authentication as it doesn't send plain text password.
	
	Ref: https://youtu.be/oZRVkdbEyfM?si=eC6RgJMK7V7ToM1B
	Same as Basic Auth but hashed password and will not add digest auth on the HTTP header
	
Preemptive Authentication
	- Proactively sends credentials with every request, regardless of server challenges
	-useful in scenarios where the server may not always challenge the client but expects credentials with requests
	
	HTTPClient will send the basic auth response before the server gives an unauthorized response
		//sends the auth details before the server asks for it.

//
HTTP 
Multi Clients might use the same credentials

//
Bearer Token Authentication
	-involves sending a token in the authentication header.
	-commonly used taken-based authentication systems like OAth 2.0
	-token is usually obtained through a separate authentication process.
	
	Ref: https://youtu.be/6BPEQU53HgA?si=Wt9ZNuBDm_mOBrr5
	Tells the API to Give access to anyone who has the token
	generated by the server
	
OAuth 1.0 Authentication
	-Requires the exchange of credentials for access tokens and secrets.
	-Uses a combination of consumer key, consumer secret, access token and access token secret.
	-More complex than OAuth 2.0 and less widely adopted.
	

	
OAuth 2.0 Authentication
	-involves obtaining an access token to access the protected resources.
	-supports different grant types such as authorization code, implicit, resource owner password credentials and client credentials.
	-More streamlined and widely adopted when comparred to OAuth 1.0
	
		Ref: https://youtu.be/ZV5yTm4pT8g?si=h_gAossYlX4dwMD2
	
	Resource Key given to allow holder to gain access to certain personal info without providing user/pass credentials
	User - auth a n app, the app request acces to the server, serve informs the user about the apps request, user approves and server grants access to the app and gives the app a token to be used to access a specific data.
	Access can expire and revoke at any time
	v2 also support refresh token
	
API Key Authentication
	-involves sending an API key in the request header.
	-Commonly used for machine-to-machine communication.
	-provides a simple way to identify and authorized API clients.
	
		Ref: https://youtu.be/sNn23dPRUS8?si=HApxQbm4pN2HeWh8
		Identifies APIs calling, wheras Tokens are for Users
		No expiration
		
JWT Authentication
	-uses a compact, URL-safe means of representing claims between 2 parties
	-Typically used to token-based authentication and authorization.
	-Can contain information about the user, expiration, and other claims.
	
	Ref: https://youtu.be/iHNkGQyJxJs?si=LCaJTzu851ZM_pfX
	User provide user and pass to the server then the server will provide a JWT token to use instead of the real credentials.
	Token have specifics, time-validity, what authorize
	in the HTTP Header
	
Certificate-Based Authentication
	-involves exchanging digital certificates to authenticate clients or servers
	-provides a higher level of security compared to simple Username/password
	-commonly used in enterprise environments.
		Certificate handed by a trusted CA
		CRL - Certificate Revoke List
		OCSP - Online Certificate Protocol
		
	Ref: https://youtu.be/9HY6Xit2Ykc?si=5GWauFspThKFjvii
	
OpenID Connect
	-built on top of OAuth 2.0, provides a standard for authentication.
	-enables clients to verify identity of the end user and to obtain basic profile information.
	-ID token that contains many information about the user.
	Identity and context aware
	
	Ref: https://youtu.be/CHczpasUEIc?si=nmwAX2uaARYhZXI3
